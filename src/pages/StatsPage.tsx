import React from "react";
import { useLocalStorage } from "../hooks/useLocalStorage";
import { type SchulteGameResult } from "../games/SchulteTable/types";
import "../styles/StatsPage.css";

const findBestResults = (history: SchulteGameResult[]): Set<string> => {
  const bests: { [key: number]: SchulteGameResult } = {};

  history.forEach((result) => {
    const size = result.boardSize;
    const currentBest = bests[size];

    // –Ø–∫—â–æ –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É —â–µ –Ω–µ–º–∞—î —Ä–µ–∫–æ—Ä–¥—É, –∞–±–æ –Ω–æ–≤–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫—Ä–∞—â–∏–π
    if (
      !currentBest ||
      result.time < currentBest.time ||
      (result.time === currentBest.time &&
        result.mistakes < currentBest.mistakes)
    ) {
      bests[size] = result;
    }
  });

  // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ Set –∑ ID –Ω–∞–π–∫—Ä–∞—â–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ –¥–ª—è —à–≤–∏–¥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø—É
  return new Set(Object.values(bests).map((r) => r.id));
};

const StatsPage: React.FC = () => {
  // –û—Ç—Ä–∏–º—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é —ñ–≥–æ—Ä. –ù–∞–º –ø–æ—Ç—Ä—ñ–±–Ω–∞ —Ç—ñ–ª—å–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—è —á–∏—Ç–∞–Ω–Ω—è, —Ç–æ–º—É –¥—Ä—É–≥–∏–π –µ–ª–µ–º–µ–Ω—Ç –º–∞—Å–∏–≤—É —ñ–≥–Ω–æ—Ä—É—î–º–æ.
  const [gameHistory, setGameHistory] = useLocalStorage<SchulteGameResult[]>(
    "schulte-game-history",
    []
  );

  // –°–æ—Ä—Ç—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏ —Ç–∞–∫, —â–æ–± –Ω–∞–π–Ω–æ–≤—ñ—à—ñ –±—É–ª–∏ –∑–≤–µ—Ä—Ö—É
  const sortedHistory = [...gameHistory].sort(
    (a, b) => new Date(b.date).getTime() - new Date(a.date).getTime()
  );

  const bestResultIds = findBestResults(gameHistory);

  const handleClearHistory = () => {
    // –ü–æ–∫–∞–∑—É—î–º–æ –≤—ñ–∫–Ω–æ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
    const isConfirmed = window.confirm(
      '–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—é —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è "–¢–∞–±–ª–∏—Ü—ñ –®—É–ª—å—Ç–µ"? –¶—é –¥—ñ—é –Ω–µ–º–æ–∂–ª–∏–≤–æ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏.'
    );

    // –Ø–∫—â–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ "OK", —Ç–æ isConfirmed –±—É–¥–µ true
    if (isConfirmed) {
      setGameHistory([]); // <-- –¶–µ –æ–Ω–æ–≤–∏—Ç—å —Å—Ç–∞–Ω —ñ –æ—á–∏—Å—Ç–∏—Ç—å localStorage!
      console.log("–Ü—Å—Ç–æ—Ä—ñ—è –æ—á–∏—â–µ–Ω–∞.");
    }
  };

  // –Ø–∫—â–æ —ñ—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è, –ø–æ–∫–∞–∑—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
  if (sortedHistory.length === 0) {
    return (
      <div className="stats-page-container">
        <h1>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>
        <p>–í–∏ —â–µ –Ω–µ –∑—ñ–≥—Ä–∞–ª–∏ –∂–æ–¥–Ω–æ—ó –≥—Ä–∏ –≤ "–¢–∞–±–ª–∏—Ü—é –®—É–ª—å—Ç–µ".</p>
        <p>–ó—ñ–≥—Ä–∞–π—Ç–µ, —â–æ–± –ø–æ–±–∞—á–∏—Ç–∏ —Ç—É—Ç —Å–≤–æ—ó —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏!</p>
      </div>
    );
  }

  return (
    <div className="stats-page-container">
      <h1>–ú–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h1>

      <button onClick={handleClearHistory} className="btn clear-history-button">
        –û—á–∏—Å—Ç–∏—Ç–∏ —ñ—Å—Ç–æ—Ä—ñ—é
      </button>

      <h2>–¢–∞–±–ª–∏—Ü—è –®—É–ª—å—Ç–µ</h2>
      <table className="stats-table">
        <thead>
          <tr>
            <th>–î–∞—Ç–∞</th>
            <th></th>
            <th>–†–æ–∑–º—ñ—Ä</th>
            <th>–ß–∞—Å (—Å–µ–∫)</th>
            <th>–ü–æ–º–∏–ª–∫–∏</th>
          </tr>
        </thead>
        <tbody>
          {sortedHistory.map((result) => (
            <tr
              key={result.id}
              className={bestResultIds.has(result.id) ? "best-result" : ""}
            >
              <td>{new Date(result.date).toLocaleString("uk-UA")}</td>
              <td>{bestResultIds.has(result.id) && "üèÜ"}</td>
              <td>
                {result.boardSize}x{result.boardSize}
              </td>
              <td>{(result.time / 1000).toFixed(2)}</td>
              <td>{result.mistakes}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default StatsPage;
